<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300" addedToStage="init(event)">

	<fx:Script>
		<![CDATA[
			private var _active:Boolean = false;
			private var _frameRect:Rectangle = new Rectangle();
			
			private var _fnChangeListener:Function;

			private var _tab:Array = [];
			private var _visibleTabs:Array = [0,1,2,3,4,5,6,7];

			private var _constrainAR:Boolean = false;
			private var _frameBisector:Object = new Object();
			private var _mouseProjector:Object = new Object();
			private var _xyRatio:Number;
			
			private var _dragToPoint:Point = new Point();
			
			
			private function init(event:Event):void
			{
				//for (var i:int=0; i<8; i++){
				for (var i:int=0; i<_visibleTabs.length; i++){
					_tab[_visibleTabs[i]] = FrameTab(idFrame.addChild(new FrameTab()));
					_tab[_visibleTabs[i]].change = handleDragging;
					//_tab[i] = FrameTab(idFrame.addChild(new FrameTab()));
					//_tab[i].change = handleDragging; 
				}
				updateFrame();
			}
			
			private function initConstrainedResize(e:Event):void
			{
				_xyRatio = frameRect.width / frameRect.height;
				switch (e.target){
					case _tab[0]:
					case _tab[7]:
						_frameBisector.x1 = frameRect.left;   
						_frameBisector.y1 = frameRect.top;   
						_frameBisector.x2 = frameRect.right;   
						_frameBisector.y2 = frameRect.bottom;
						break;
					
					case _tab[2]:
					case _tab[5]:
						_frameBisector.x1 = frameRect.left;   
						_frameBisector.y1 = frameRect.bottom;   
						_frameBisector.x2 = frameRect.right;   
						_frameBisector.y2 = frameRect.top;
						break;
					
					case _tab[1]:
					case _tab[6]:
						_frameBisector.x1 = _frameBisector.x2 = _tab[1].x;   
						_frameBisector.y1 = -1000;   
						_frameBisector.y2 = 1000;
						break;
					
					case _tab[3]:
					case _tab[4]:
						_frameBisector.y1 = _frameBisector.y2 = _tab[3].y;   
						_frameBisector.x1 = -1000;   
						_frameBisector.x2 = 1000;
						break;
					
					
				}
			} 
			
			private function updateInterctLines(tab:Object):void
			{
				_mouseProjector.x1 = mouseX;
				_mouseProjector.y1 = mouseY;
				switch (tab){
					case _tab[0]:
					case _tab[7]:
						_mouseProjector.x2 = mouseX + 1000;
						_mouseProjector.y2 = mouseY - 1000 * _xyRatio;
						break;
					case _tab[2]:
					case _tab[5]:
						_mouseProjector.x2 = mouseX + 1000;
						_mouseProjector.y2 = mouseY + 1000 * _xyRatio; 
						break;
					case _tab[1]:
					case _tab[6]:
						_frameBisector
						_mouseProjector.x2 = mouseX + 1000;
						_mouseProjector.y2 = mouseY;
						break;
					case _tab[3]:
					case _tab[4]:
						_mouseProjector.x2 = mouseX;
						_mouseProjector.y2 = mouseY + 1000;
						break;
				}
			}
			
			private function handleDragging(tab:Object):void
			{
				if (_constrainAR){
					updateInterctLines(tab);
					_dragToPoint = intersection( _frameBisector, _mouseProjector);
				}else{
					_dragToPoint = new Point(mouseX, mouseY);
				}
				resizeFrame(tab);
			}
			

			private function resizeFrame(tab:Object):void
			{
				switch(tab){
					case _tab[0]:
						updateLeft();
						updateTop();
						break;
					
					case _tab[1]:
						updateTop();
						break;
					
					case _tab[2]:
						updateRight();
						updateTop();
						break;
					
					case _tab[3]:
						updateLeft();
						break;
					
					
					case _tab[4]:
						updateRight();
						break;
					
					case _tab[5]:
						updateLeft();
						updateBottom();
						break;
					
					case _tab[6]:
						updateBottom();
						break;
					
					case _tab[7]:
						updateBottom();
						updateRight();
						break;
				}
				
				if (_constrainAR){
					switch(tab){
						case _tab[1]:
						case _tab[6]:
							updateWidth();
							break;
						case _tab[3]:
						case _tab[4]:
							updateHeight();
							break;
					}
				}
				
				updateFrame();
				
			}
			
			private function keepFrameRectInBounds():void
			{
				if (frameRect.left < 0){
					frameRect.left = 0;
				} 
				if (frameRect.top < 0){
					frameRect.top = 0;
				} 
				if (frameRect.right > parent.width){
					frameRect.right = parent.width; 
				};
				if (frameRect.bottom > parent.height){
					frameRect.bottom = parent.height; 
				};
			}
			
			private function updateWidth():void
			{
				var w:Number = frameRect.width; 
				frameRect.width = frameRect.height * _xyRatio;
				frameRect.x -= (frameRect.width - w)/2;
			}

			private function updateHeight():void
			{
				var h:Number = frameRect.height; 
				frameRect.height = frameRect.width / _xyRatio;
				frameRect.y -= (frameRect.height - h)/2;
			}
			
			
			private function updateLeft():void
			{
//				if (_dragToPoint.x > 0 && _dragToPoint.x < frameRect.right - 10 ){	
				if ( _dragToPoint.x < frameRect.right - 10 ){	
					frameRect.left = _dragToPoint.x;
				}
			}
			
			private function updateTop():void
			{
				//if (_dragToPoint.y > 0 && _dragToPoint.y < frameRect.bottom - 10 ){	
				if (_dragToPoint.y < frameRect.bottom - 10 ){	
					frameRect.top = _dragToPoint.y;
				}
			}
			
			private function updateRight():void
			{
				//if (_dragToPoint.x < parent.width && _dragToPoint.x > frameRect.left + 10 ){	
				if (_dragToPoint.x > frameRect.left + 10 ){	
					frameRect.right = _dragToPoint.x;
				}
			}
			
			private function updateBottom():void
			{
				//if (_dragToPoint.y < parent.height && _dragToPoint.y > frameRect.top + 10 ){	
				if (_dragToPoint.y > frameRect.top + 10 ){	
					frameRect.bottom  = _dragToPoint.y;
				}
			}
			
			
			public function get frameRect():Rectangle
			{
				return _frameRect;
			}

			public function set frameRect(rect:Rectangle):void
			{
				_frameRect = rect;
			}
			
			
			private function updateFrame(alertChange:Boolean=true):void
			{
				if (_tab.length > 0){
					var mat : Matrix = new Matrix;
					mat.createGradientBox(4, 4, Math.PI/4, 0, 0);

					idFrame.graphics.clear();
					
					idFrame.graphics.lineStyle(0);
					idFrame.graphics.lineGradientStyle(GradientType.LINEAR, [0xffffff, 0xffffff, 0x000000, 0x000000], [1,1,1,1,], [0,64,128,255], mat, SpreadMethod.REPEAT);
					idFrame.graphics.drawRect(frameRect.x, frameRect.y, frameRect.width, frameRect.height);
				
					if (_tab[0]){
						_tab[0].y = frameRect.top;
						_tab[0].x = frameRect.left;
					}
					
					if(_tab[1]){
						_tab[1].x = frameRect.left + frameRect.width/2;
						_tab[1].y = frameRect.top;
					}
					
					if(_tab[2]){
						_tab[2].x = frameRect.right;
						_tab[2].y = frameRect.top;
					}
					
					if(_tab[3]){
						_tab[3].x = frameRect.left;
						_tab[3].y = frameRect.top + frameRect.height/2;
					}

					if(_tab[4]){
						_tab[4].x = frameRect.right;
						_tab[4].y = frameRect.top + frameRect.height/2;
					}

					if(_tab[5]){
						_tab[5].x = frameRect.left;
						_tab[5].y = frameRect.bottom;
					}

					if(_tab[6]){
						_tab[6].x = frameRect.left + frameRect.width/2;
						_tab[6].y = frameRect.bottom;
					}

					if(_tab[7]){
						_tab[7].x = frameRect.right;	
						_tab[7].y = frameRect.bottom;
					}
					
					/*
					_tab[0].y = _tab[1].y = _tab[2].y = frameRect.top;
					_tab[0].x = _tab[3].x = _tab[5].x = frameRect.left;
					
					_tab[3].y = _tab[4].y = frameRect.top + frameRect.height/2;
					_tab[1].x = _tab[6].x = frameRect.left + frameRect.width/2;
	
					_tab[2].x = _tab[4].x = _tab[7].x = frameRect.right;
					_tab[5].y = _tab[6].y = _tab[7].y = frameRect.bottom;
					*/
				
					if (alertChange && _fnChangeListener != null){
						_fnChangeListener();
					}
				}
			}
			
			public function set change(fnChangeListener:Function):void
			{
				_fnChangeListener = fnChangeListener;
			}
			
			
			public function set constrainAR(state:Boolean):void
			{
				if (_constrainAR = state){
					addEventListener(FrameTab.START_DRAGGING_TAB, initConstrainedResize, true);
				}else{
					removeEventListener(FrameTab.START_DRAGGING_TAB, initConstrainedResize, true);
				}
				//_tab[1].visible = _tab[3].visible = _tab[4].visible = _tab[6].visible = !state;
			}
			
			/*public function showTabs(tabs:Array, state:Boolean=true):void
			{
				for (var i:int=0; i<tabs.length; i++){
					_tab[tabs[i]].visible = state;
				}
			}*/
			
			public function set tabs(t:Array):void
			{
				_visibleTabs = t;	
			}
			
			public function update(X:int, Y:int, W:int, H:int):void
			{
				frameRect.x = X;
				frameRect.y = Y;
				frameRect.width = W;
				frameRect.height = H;
				updateFrame(false);
			}

			private function intersection(line1:Object, line2:Object):Point 
			{
				var ip:Point;
				var a1:Number;
				var a2:Number;
				var b1:Number;
				var b2:Number;
				var c1:Number;
				var c2:Number;
				
				a1 = line1.y2 - line1.y1;
				b1 = line1.x1 - line1.x2;
				c1 = line1.x2 * line1.y1 - line1.x1 * line1.y2;
				a2 = line2.y2 - line2.y1;
				b2 = line2.x1 - line2.x2;
				c2 = line2.x2 * line2.y1 - line2.x1 * line2.y2;
				
				var denom:Number=a1*b2 - a2*b1;
				if (denom == 0) {
					return null;
				}
				ip=new Point();
				ip.x=(b1*c2 - b2*c1)/denom;
				ip.y=(a2*c1 - a1*c2)/denom;				
				return ip;			
			}
						
			
		]]>		
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:Image x="0" y="0" width="100" height="100" id="idFrame"/>
	
	<!--temp for visually debugging intersection algorithm-->
	<mx:Image x="0" y="0" width="100" height="100" id="idDiag"/>
	<mx:Image x="0" y="0" width="100" height="100" id="idIntersect"/>
	
</s:Group>
